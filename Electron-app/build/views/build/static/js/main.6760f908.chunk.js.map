{"version":3,"sources":["redux/actions/devicesActions.ts","redux/actions/ipsActions.ts","redux/actions/types.ts","component/tablas/Device.tsx","component/tablas/Table.tsx","component/tablas/Devices.tsx","component/Navbar.tsx","component/tablas/tools/CountDevices.tsx","component/tablas/tools/PowerOfMiner.tsx","component/tablas/tools/InputDataUser.tsx","component/LoaderDevices.tsx","component/Search/GetMyip.tsx","component/Search/Search.tsx","App.tsx","redux/reducers/ipsReducer.ts","redux/reducers/devicesReducer.ts","redux/reducers/index.ts","store.ts","serviceWorker.ts","index.tsx"],"names":["time_openBuild","ipcRenderer","window","resetMyIp","localStorage","setItem","location","reload","type","payload","myip","isMyipLocal","scanAuto","ips_local","getItem","send","getLocalIP","time_getData","Device","error","data","ip","useState","speed","setspeed","RPM","setRPM","summary","setsummary","pool","setpool","temps","settemps","check","setcheck","dispatch","useDispatch","useEffect","setTimeout","clearTimeout","Object","keys","map","key","dummy","temps_","key_","_temps","toFixed","push","toString","x","join","dummy_Speed","dummy_RPM","fan","filter","summary_","length","className","onClick","openBuild","BuildRounded","Table","props","Swal","fire","position","icon","title","showConfirmButton","timer","children","Devices","device","setdevice","useSelector","state","devices","undefined","device_","data-position","data-tooltip","CodeOutlined","CountDevices","count","setcount","count_","PowerOfMiner","Thtotal","setThtotal","thTotal","id","InputDataUser","localIP","setlocalIP","isEnable","setisEnable","localsip","ips","currentIp","checkAutoRef","useRef","onSubmit","e","preventDefault","ref","name","value","onChange","currentTarget","checked","onChangecheck","disabled","LoaderDevices","time","seterror","text","Fragment","GetMyip","setMyip","Search","SearchOutlined","App","ipsAll","on","event","arg","isloader","setData","setIps","console","log","setLocalIP","myip_local","split","initIps","time2","getData","Navbar","action","combineReducers","middleware","thunk","process","store","createStore","rootReducer","compose","applyMiddleware","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6760f908.chunk.js","sourcesContent":["import {  DEVICES_LOADER,DEVICES_DATA,DEVICES_GET_DATA,DEVICES_SET_DATA,\n    DEVICES_ERROR,OPEN_BUILD} from \"./types\";\n\n\n//@ts-ignore\nconst  ipcRenderer = window.ipcRenderer\n\n\n\n\nlet time_getData:any=0;\n\nexport const setLoader= (loader:boolean)=>{    \n\n return  {\n        type:DEVICES_LOADER,\n        payload:{isloader:loader}\n    }  \n}\n\nexport const getData= (ips:[string])=>{    \n    clearTimeout(time_getData)    \n     time_getData = setTimeout(()=>{ipcRenderer.send('discover-all', ips)    \n    },400)           \nreturn {\n            type:DEVICES_GET_DATA            \n        }    \n    }\n\n\n\nexport const setData=(data:any)=>{        \n    \n        return {\n                type:DEVICES_SET_DATA,\n                payload:{data:data,\n                    isloader:true}\n            }\n        }\n\n\n\nlet time_openBuild:any;\n        \nexport const openBuild=(ip:string)=>{    \n    clearTimeout(time_openBuild)    \n     time_openBuild = setTimeout(()=>{ipcRenderer.send('modal', ip)    \n    },100)           \n            return {\n                    type:OPEN_BUILD\n                }\n            }","import store from \"../../store\";\nimport { GET_IPS, ADD_IPS, INIT_IPS,ADD_MYIPS,GET_LOCAL_IPS,SET_LOCAL_IPS,IS_LOCAL_IPS ,RESET_MYIPS  } from \"./types\";\n\n//@ts-ignore\nconst ipcRenderer = window.ipcRenderer;\n\n\n\nexport const resetMyIp =() => {    \n  localStorage.setItem(\"myip\",\"\");\n  \n  \n    window.location.reload()\n  \n  \n  //@ts-ignore\n  return {\n    type: RESET_MYIPS,\n    payload: { myip: \"\",\n      isMyipLocal:false\n     },\n  };\n};\n\n\n\n\nexport const initIps = () => {\n  const ips_local = localStorage.getItem(\"ips\");\n  const myip_local = localStorage.getItem(\"myip\");\n  let myip = \"\";\n  let ips = [];  \n  let isMyipLocal=false\n\n\n\n  if (ips_local !== \"\") {\n    //@ts-ignore\n    ips = ips_local?.split(\",\");\n  }\n  \n  if (myip_local !== \"\") {\n    //@ts-ignore\n    myip = myip_local;    \n    isMyipLocal=true\n  } \n\nreturn {\n    type: INIT_IPS,\n    payload: { ips, myip, isMyipLocal},\n  };\n};\n\nexport const scanAuto = () => { \n  const ips_local = localStorage.getItem(\"myip\");\n  ipcRenderer.send(\"scan-ip-subnet\", ips_local);\n  //@ts-ignore\n  return { type: GET_IPS };\n};\n\nexport const setIps =(ips: any) => {  \n  \n  localStorage.setItem(\"ips\", ips);\n  //@ts-ignore\n  return {\n    type: ADD_IPS,\n    payload: { ips: ips },\n  };\n};\n\n\nexport const setMyIp =(myip: any) => {    \n  localStorage.setItem(\"myip\", myip);\n  ipcRenderer.send(\"scan-ip-subnet\", myip);\n  //@ts-ignore\n  return {\n    type: ADD_MYIPS,\n    payload: { myip: myip,\n      isMyipLocal:true\n     },\n  };\n};\n\n\n\n\n\n\n\n\n\nexport const getLocalIP =() => {      \n  ipcRenderer.send(\"current-local-ip\",null);  \n  //@ts-ignore\n  return {\n    type: GET_LOCAL_IPS\n  };\n};\n\nexport const setLocalIP =(arg:any) => {     \n  console.log(arg);\n  return {\n    type: SET_LOCAL_IPS,\n    payload:{currentIp:arg}\n  };\n};\n\n","export const INIT_IPS='INIT_IPS'\nexport const GET_IPS='GET_IPS'\nexport const ADD_IPS='ADD_IPS'\nexport const ADD_MYIPS='ADD_MYIPS'\nexport const RESET_MYIPS='ADD_MYIPS'\n\nexport const GET_LOCAL_IPS='GET_LOCAL_IPS'\nexport const SET_LOCAL_IPS='SET_LOCAL_IPS'\nexport const IS_LOCAL_IPS='IS_LOCAL_IPS'\n\n\nexport const DEVICES_DATA='DEVICES_DATA'\nexport const DEVICES_SET_DATA='DEVICES_SET_DATA'\nexport const DEVICES_GET_DATA='DEVICES_GET_DATA'\nexport const DEVICES_LOADER='DEVICES_LOADER'\n\nexport const DEVICES_ERROR='DEVICES_ERROR'\n\nexport const OPEN_BUILD='OPEN_BUILD'\n\n\n\n","import React, { useEffect, useState } from \"react\";\nimport {useDispatch } from \"react-redux\";\nimport { BuildRounded } from \"@material-ui/icons\";\nimport {openBuild} from '../../redux/actions/devicesActions'\n\n\n\n//@ts-ignore\nconst  ipcRenderer = window.ipcRenderer\n//@ts-ignore\nexport default function Device({ data, ip }) {\n  const [speed, setspeed] = useState(0);\n  const [RPM, setRPM] = useState(\"\");\n  const [summary, setsummary] = useState(\"\");\n  const [pool, setpool] = useState(false);\n  const [temps, settemps] = useState(\"\");\n\n  const [check, setcheck] = useState(false)\n  const dispatch = useDispatch()\n  \n  let error:any;\n  useEffect(() => {\n    \n    if(check && error===0)\n    error=setTimeout(() => {\n      ipcRenderer.send('notification','192.168.0.30')\n      error=0\n    }, 5000);\n    else if(error!==0 && !check) clearTimeout(error)\n\n    return () => {\n      clearTimeout(error)\n      error=0\n    }\n  }, [check])\n  \n  \n  \n  useEffect(() => {\n    try{    \n    setcheck(false)    \n    Object.keys(data).map((key) => {           \n      if (key === \"temps\") {        \n        let dummy: any = [];\n        const temps_ = data[key];\n        //@ts-ignore\n        Object.keys(temps_).map((key_) =>{\n          const _temps =temps_[key_][\"Chip\"].toFixed(2)          \n          dummy.push(_temps.toString())\n        }\n        );\n        //@ts-ignore\n        dummy.map(x=>{\n          if(x>95)\n          setcheck(true)\n        })\n        //@ts-ignore\n        settemps(dummy.join(\"/\"));\n      }\n\n      if (key === \"fans\") {\n        let dummy_Speed: any[] = [];\n        let dummy_RPM: any[] = [];\n        const fans = data[key];\n\n        fans.map((fan: any) =>\n          Object.keys(fan).map((key_) => {\n            \n            \n            if (key_ === \"RPM\") {\n              dummy_RPM.push(fan[key_]);              \n            }\n            if (key_ === \"Speed\") {\n              dummy_Speed.push(fan[key_]);            \n              if(fan[key_]>95 ||fan[key_]<10 )\n              setcheck(true)\n            }\n\n            \n\n          })\n        );\n\n        setRPM(dummy_RPM.filter((x) =>{ \n          if(x>0&&x<1500)\n          setcheck(true)          \n          if(x !== 0)\n          return x\n        \n        }).join(\"/\"));\n        setspeed(dummy_Speed[0]);\n      }\n\n      if (key === \"summary\") {\n        const summary_raw: number = data[key][\"MHS 1m\"];\n        const summary_ = (summary_raw / 1e6).toFixed(2);\n        \n        \n        setsummary(summary_.toString());\n      }\n      if (key === \"pools\") {\n        const pool_State: [] = data[key];\n\n        if (pool_State.filter((x) => x[\"Stratum Active\"]).length > 0)\n          setpool(true);\n        else{\n          setpool(false);\n          setcheck(true)\n        }\n        \n        \n        \n      }\n    });\n  }\n  catch{\n    setRPM(\"\")\n    setpool(false)\n    settemps(\"\")\n    setspeed(0)\n    setsummary(\"\")\n  }\n\n  return ()=>{\n    setRPM(\"\")\n    setpool(false)\n    settemps(\"\")\n    setspeed(0)\n    setsummary(\"\")\n  }\n  \n  \n  }, [data]);\n\n  return (\n    <tr className={`${check?\"red lighten-2\":\"\"} `}>\n      <th className=\"center\" >{ip}</th>\n      <th className=\"center\">{pool?\"Active\" : \"Dead\"}</th>\n      <th className=\"center\">{summary} Th/s</th>\n      <th className=\"center\">{temps}</th>\n      <th className=\"center\">{RPM}</th>\n      <th className=\"center\">{speed} %</th>\n      <th className=\"center\">\n        <button className=\"btn-floating btn-small btc-icon \"\n        onClick={()=>dispatch(openBuild(ip))} >\n          <BuildRounded className=\"btc-item\"/>\n        </button>\n      </th>\n    </tr>\n  );\n}\n","import React,{useEffect} from 'react'\nimport Swal from 'sweetalert2'\n//@ts-ignore\nfunction Table(props) {\n  useEffect(() => {    \n    Swal.fire({\n      position: 'top-end',\n      icon: 'success',\n      title: 'Your work has been saved',\n      showConfirmButton: false,\n      timer: 2000\n    })    \n    return () => {\n    \n    }\n  }, [])\n    return (\n        <table className=\"centered \">\n    <thead>\n      <tr>\n          <th>IP</th>                    \n          <th>Pool State</th>\n          <th>Hast Rate</th>          \n          <th>Temp ºC</th>\n          <th>Fan Speed RPM</th>\n          <th>Fan %</th>\n          <th>Build</th>\n      </tr>\n    </thead>\n    \n    <tbody >\n    {props.children}     \n    </tbody>\n  </table>\n  )  \n  \n}\n\nexport default Table\n","import React,{useEffect,useState} from 'react'\nimport { useSelector,useDispatch } from 'react-redux'\n\nimport Device from \"./Device\";\nimport Table from \"./Table\";\n\n\n//@ts-ignore\nfunction Devices() {    \n    const [device, setdevice] = useState([])    \n    //@ts-ignore\n    const data = useSelector(state=>state.devices.data)\n\n  useEffect(()=>{          \n    if(data==undefined)\n    return    \n    const device_ = Object.keys(data).map(ip=>{      \n      return <Device data={data[ip]} ip={ip} key={ip} />            \n    })\n    \n    \n    //@ts-ignore\n    setdevice(device_)\n\n    \n\n  },[data])\n  \n\n\n  return (\n<div className=\"container\">\n<Table>{device.map(x=>x)}</Table>\n</div>\n    )\n}\n\n\nexport default Devices\n","import React,{useState,useEffect} from 'react'\nimport {useSelector } from 'react-redux'\nimport { CodeOutlined } from '@material-ui/icons';\n\n//@ts-ignore\nconst ipcRenderer = window.ipcRenderer;\nexport default function () {\n    const [count, setcount] = useState(0)\n    //@ts-ignore\n    const data = useSelector(state => state.devices.data)\n\n    useEffect(()=>{\n        \n    },[])\n\n    let timer=0;\n\n    function developer() {        \n        if(timer==0)\n        setTimeout(() => {\n            ipcRenderer.send('modal-developer')            \n            timer=0\n        }, 500);\n        else\n        clearTimeout(timer)\n\n\n        \n    }\n\n    \n    \n\n\n\n    return (\n    \n        <nav >\n          \n    \n        <div className=\"nav-wrapper purple darken-4 tooltipped\" data-position=\"bottom\" data-tooltip=\"Developer for camicasii.xyz\">\n        <div className=\"container\">\n        <a className=\"brand-logo center\">Mielikki</a>     \n        <ul className=\"right \">\n        <li><a onClick={()=>developer()}><CodeOutlined/></a></li>\n        \n      </ul>\n      </div>  \n    \n    </div>\n  </nav>\n  \n  \n    )\n}\n","import React,{useState,useEffect}  from 'react'\nimport {useSelector } from 'react-redux'\n\nexport default function CountDevices() {\n    \n    const [count, setcount] = useState(0)\n    //@ts-ignore\n    const data = useSelector(state => state.devices.data)\n\n    useEffect(()=>{\n        try {\n            if(data!==undefined)\n            {const count_ = Object.keys(data).length\n                setcount(count_)\n            }\n        } catch{\n            setcount(0)\n        }\n\n    },[data])\n    \n    return (\n\n      <div className=\"card center tooltipped\" data-position=\"left\" data-tooltip=\"Total of devices\">\n        <span className=\"card-title\">Devices</span>\n        <div className=\"card-content\">\n            {count}\n        </div>\n      </div>\n    \n\n\n\n        \n    )\n}\n","import React,{useEffect,useState} from 'react'\nimport { useSelector,useDispatch } from 'react-redux'\n\nexport default function PowerOfMiner() {\n    const [Thtotal, setThtotal] = useState(0) \n    //@ts-ignore    \n    const data = useSelector(state=>state.devices.data)\n\n\n    useEffect(()=>{          \n        if(data==undefined)\n        return\n        let thTotal=0\n        \n        Object.keys(data).map(ip=>{                       \n          try{if(data[ip].summary['MHS 1m']!==undefined)\n          thTotal += data[ip].summary['MHS 1m']                  \n        }\n          catch{\n            return\n          }\n        })\n        \n        setThtotal((thTotal / 1E6))\n        \n    \n      },[data])\n    return (\n        \n    \n      <div className=\"card center tooltipped\" data-position=\"right\" data-tooltip=\"Power of miner\">\n        <span className=\"card-title\">POM</span>\n        <div className=\"card-content\">        \n            <span id=\"Thtotal\">{Thtotal.toFixed(2).toString()} Th</span>\n        </div>\n      </div>\n    \n    )\n}\n","import React,{useEffect,useState,useRef, FormEvent} from 'react'\nimport { useSelector,useDispatch } from \"react-redux\";\nimport {\n  setMyIp,scanAuto\n} from \"./../../../redux/actions/ipsActions\";\n\n//@ts-ignore\nconst  ipcRenderer = window.ipcRenderer\n\nexport default function InputDataUser() {\n    const [localIP, setlocalIP] = useState(\"\")\n    const [isEnable, setisEnable] = useState(true)\n    //@ts-ignore\n    const localsip = useSelector(state => state.ips.currentIp)    \n    const checkAutoRef = useRef(null)\n    const dispatch = useDispatch()\n\n       \n    let timer:any =0\n    function onSubmit(e:FormEvent) {   \n      e.preventDefault()          \n      if(localIP!==\"\"||timer===0)\n      timer=setTimeout(() => {\n        dispatch(setMyIp(localIP))  \n        \n        timer=0\n        clearTimeout(timer)       \n      },100);\n      \n    }\n\n\n    function onChangecheck(e:FormEvent) {        \n        e.preventDefault()        \n        //@ts-ignore        \n        if(e.currentTarget.checked !==true ) return\n        //@ts-ignore\n        setlocalIP(e.currentTarget.value);        \n        setisEnable(false)\n    }\n    \n    return (\n      <div className=\"container\">\n        <div className=\"row center\">\n            <div className=\" card col s12 \">                    \n            \n            <div className=\"card-title\">\n            Select your ip\n            </div>\n            \n            <form onSubmit={(e)=>onSubmit(e)} className=\"card-content\">\n            \n            <div className=\"row\">\n            <div className=\"input-field col s12\" ref={checkAutoRef}>\n            {localsip.length>0?          \n            //@ts-ignore\n              localsip.map((x:any)=>            \n            {                \n            return <p key={x['address']}>\n               <label>\n              <input name=\"group1\" type=\"radio\" \n               value={x['address']} \n               onChange={(e)=>onChangecheck(e)}  />\n              <span>{x['address']}</span>\n            </label>\n          </p>\n          }):\"Local Ip not found\"\n          }          \n          </div>\n          </div>\n          \n            <div className=\"card-action\">\n          <button   className=\"waves-effect waves-light btn-small\" type=\"submit\" disabled={isEnable} >set Ip</button>          \n          \n          </div>\n        </form>\n        \n            \n            </div>\n        </div>\n        </div>\n    )\n}\n","import React,{useState, useEffect} from 'react'\nimport { useSelector,useDispatch } from \"react-redux\";\nimport { resetMyIp } from \"../redux/actions/ipsActions\";\nimport Swal from 'sweetalert2'\n//@ts-ignore\nfunction LoaderDevices() {\n  //@ts-ignore\n  const ips = useSelector(state => state.ips.ips)\nconst dispatch = useDispatch()\n  const [error, seterror] = useState(false)\n  let time:any\n\n  useEffect(() => {   \n    time=setTimeout(()=>{ seterror(true)\n    Swal.fire({\n      icon: 'error',\n      title: 'Oops...',\n      text: 'Something went wrong!',\n      showConfirmButton: false,\n      timer:4000  \n    })\n   },90000)    \n   return ()=>clearTimeout(time)\n  }, [])\n\n  useEffect(()=>{\n    if(ips.length>0)    \n    clearTimeout(time)\n  },[ips])\n    \n\n    return (   \n      <React.Fragment>      \n    {!error?\n    <div>\n      <div className=\"row\">\n    <div className=\"preloader-wrapper big active\">\n       <div className=\"spinner-layer spinner-blue-only\">\n      <div className=\"circle-clipper left\">\n        <div className=\"circle\"></div>\n      </div><div className=\"gap-patch\">\n        <div className=\"circle\"></div>\n      </div><div className=\"circle-clipper right\">\n        <div className=\"circle\"></div>\n      </div>\n    </div>    \n  </div>\n  </div>\n  <div className=\"row\">\n  <div className=\"col s2 offset-s5\">\n    <div className=\"card-panel teal\" onClick={()=>resetMyIp()}>\n      <span className=\"white-text\">Search devices</span>\n    </div>\n  </div>\n  </div>\n  </div>\n  :\n  <div className=\"col s4 offset-s4\">\n\n<div className=\"card blue-grey darken-1\">\n        <div className=\"card-content white-text\">\n          <span className=\"card-title\">Devices not found</span>          \n        <div className=\"card-action\">\n          <button className=\"btn btn-large \" onClick={()=>dispatch(resetMyIp())}>Reset</button>         \n        </div>\n      </div>\n    \n    </div>\n  </div>\n}\n</React.Fragment>\n\n\n\n    )\n}\n\n//@ts-ignore\n\nexport default LoaderDevices\n","import React from 'react'\nimport { useDispatch,useSelector } from \"react-redux\";\n\nimport { resetMyIp,getLocalIP } from \"../../redux/actions/ipsActions\";\n//@ts-ignore\nfunction GetMyip() {\nconst dispatch = useDispatch()\nlet time:any;\n//@ts-ignore\nconst ipsAll = useSelector((state) => state.ips);\n\n\n//@ts-ignore\nfunction setMyip(e:React.FormEvent) { \n  e.preventDefault()  \n  dispatch(getLocalIP())       \n  time =setTimeout(() => {\n    dispatch(resetMyIp())    \n    time=0\n  }, 300);   \n}\n    return (\n<div className=\"fixed-action-btn\">  \n  <button className=\"btn-floating btn-large red tooltipped\" data-position=\"bottom\" data-tooltip=\"Reset Ip\" onClick={(e)=>setMyip(e)}>Set ip</button>\n</div>\n\n\n\n  \n\n    )\n}\n\n\n\n\n\n\nexport default GetMyip\n","import React,{useEffect,useState} from 'react'\n\nimport {useDispatch} from \"react-redux\";\nimport { scanAuto } from \"../../redux/actions/ipsActions\";\nimport GetMyip from \"./GetMyip\";\nimport { SearchOutlined } from '@material-ui/icons';\n\n//@ts-ignore\nfunction Search() {     \n\n    const dispatch = useDispatch()\n    function scan(e:React.MouseEvent) {                \n        dispatch(scanAuto())        \n    }   \n\n    return (\n\n\n<React.Fragment>\n    <button className=\"btn btc-icon \" onClick={(e)=>scan(e)}>scaner\n    <i className=\" material-icons right btc-item\" ><SearchOutlined /></i>\n  </button>  \n  <GetMyip/>\n</React.Fragment>\n\n    \n\n\n\n\n\n        \n    )\n}\n\n\n\n  \n\nexport default Search","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {scanAuto,\n  setIps,\n  initIps,\n  getLocalIP,\n  setLocalIP,\n} from \"./redux/actions/ipsActions\";\nimport { getData, setData } from \"./redux/actions/devicesActions\";\nimport Devices from \"./component/tablas/Devices\";\nimport Navbar from \"./component/Navbar\";\nimport CountDevices from \"./component/tablas/tools/CountDevices\";\nimport PowerOfMiner from \"./component/tablas/tools/PowerOfMiner\";\nimport InputDataUser from \"./component/tablas/tools/InputDataUser\";\nimport LoaderDevices from \"./component/LoaderDevices\";\nimport Search from \"./component/Search/Search\";\n\n//@ts-ignore\nconst ipcRenderer = window.ipcRenderer;\n//@ts-ignore\nfunction App() {\n  //@ts-ignore\n  const ipsAll = useSelector((state) => state.ips);\n  //@ts-ignore\n  const ips = ipsAll.ips\n\n  //const [ips, setips] = useState(initialState)\n  //@ts-ignore\n  const devices = useSelector((state) => state.devices);\n  //@ts-ignore\n  const data = devices.data;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const time = setTimeout(() => {\n      //@ts-ignore\n      ipcRenderer.on(\"discover-all-reply\", (event, arg) =>\n        dispatch(setData(arg))\n      );\n      //@ts-ignore\n      ipcRenderer.on(\"scan-subnet-reply\", (event, arg) =>\n        dispatch(setIps(arg))\n      );\n      //@ts-ignore\n      ipcRenderer.on(\"current-local-ip-reply\", (event, arg) =>\n        dispatch(setLocalIP(arg))\n      );\n      dispatch(initIps());\n      dispatch(getLocalIP());\n    }, 100);\n    \n    return () => clearTimeout(time);\n      \n    \n  }, []);\n  useEffect(() => {    \n    let time2:any\n    if (ips.myip!==\"\")\n    time2= setTimeout(() => scanAuto(), 100);    \n    return ()=> clearTimeout(time2);\n  }, [ipsAll.myip]);\n\n\n  useEffect(() => {\n    \n    let timer:any;\n    \n    if (ips.length > 0 && ips.myip!==\"\") \n    timer=setTimeout(() => getData(ips), 600);    \n\n    return ()=>clearTimeout(timer)\n  }, [ipsAll.ips, data,ipsAll.myip]);\n  \n\n  return (\n    <div className=\"App \">      \n      <Navbar />\n      <div className=\"row \">\n      <div className=\"camicasii-panel \">\n        <div className=\"camicasii-show\">\n          <PowerOfMiner />\n        </div>\n        <div className=\"camicasii-scanner\">\n          <div className=\"scanner\">\n          {ipsAll.isMyipLocal?<Search/>:null}\n          </div>\n          \n        </div>\n        <div className=\"camicasii-show \">\n          <CountDevices />\n        </div>\n      </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col s12 center\">\n        {!ipsAll.isMyipLocal?<InputDataUser/>:null}\n        <div className=\"col s12 center\">\n        {devices.isloader && ipsAll.isMyipLocal ? <Devices /> : <LoaderDevices />}          \n        </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { GET_IPS, ADD_IPS, INIT_IPS,ADD_MYIPS,GET_LOCAL_IPS,SET_LOCAL_IPS ,RESET_MYIPS} from \"../actions/types\";\n//@ts-ignore\nconst ips = (state = {}, action) => {\n  switch (action.type) {\n    case GET_IPS:      \n      return {\n        ...state,\n      };\n    case ADD_IPS:      \n      return {\n        ...state,\n        ...action.payload,\n      };\n      case ADD_MYIPS:      \n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    case INIT_IPS:      \n      return {\n        ...state,\n        ...action.payload,\n      };\n      case GET_LOCAL_IPS:                  \n\n        return {\n          ...state          \n        }\n        case SET_LOCAL_IPS:          \n        return {\n          ...state,          \n          ...action.payload\n        }\n        \n        case RESET_MYIPS:          \n        return {\n          ...state,          \n          ...action.payload\n        }\n    default:\n      return state;\n  }\n};\n\nexport default ips;\n","import {DEVICES_LOADER,DEVICES_SET_DATA,DEVICES_GET_DATA,OPEN_BUILD } from '../actions/types'\n//@ts-ignore\nconst devices = (state ={}, action) => {\n    switch (action.type) {\n      case DEVICES_LOADER:\n        \n        return {\n          ...state,          \n          ...action.payload          \n        }        \n        case DEVICES_SET_DATA:\n        return {\n          ...state,          \n          ...action.payload          \n        }\n        case DEVICES_GET_DATA:\n        return {\n          ...state                 \n        }     \n        \n        case OPEN_BUILD:\n        return {\n          ...state                 \n        }     \n        \n      default:\n        return state\n    }\n  }\n  \n  export default devices","import { combineReducers } from 'redux'\nimport ips from './ipsReducer'\nimport devices from './devicesReducer'\n\nexport default combineReducers({\n  ips,\n  devices\n})","import { createStore,compose,applyMiddleware,CombinedState,Store  } from \"redux\";\nimport rootReducer from './redux/reducers'\nimport  thunk from \"redux-thunk\";\n\nconst initialState={\n    ips:{ips:[],\n        currentIp:[],\n        myip:\"\",\n        isMyipLocal:false},  \n    devices:{isloader:false\n    }  \n}\n\nconst middleware=[thunk]\nlet store:Store\nconsole.log(process.env.NODE_ENV,\"env\");\n\nif(process.env.NODE_ENV===\"development\")\n//@ts-ignore\nstore = createStore(rootReducer,initialState,compose(applyMiddleware(...middleware),(window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())))\nelse{\nstore = createStore(rootReducer,initialState,compose(applyMiddleware(...middleware)))\n\n\n}\nexport default store","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//reduc configuracion\nimport store  from './store'\nimport { Provider } from \"react-redux\";\n\n\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}